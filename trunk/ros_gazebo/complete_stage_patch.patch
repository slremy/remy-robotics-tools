--- /dev/null	2013-04-24 15:04:19.596334190 -0400
+++ base_stage.patch	2013-05-06 18:46:29.893055125 -0400
@@ -0,0 +1,46 @@
+--- build/stage/libstageplugin/p_graphics.cc	2012-02-29 20:18:37.000000000 -0500
++++ build/stage/libstageplugin/p_graphics.cc	2013-05-06 18:40:59.171415177 -0400
+@@ -232,8 +232,10 @@
+ 			PLAYER_GRAPHICS2D_CMD_POINTS, this->addr)
+ 			|| Message::MatchMessage(hdr, PLAYER_MSGTYPE_CMD,
+ 					PLAYER_GRAPHICS2D_CMD_POLYLINE, this->addr)
+-			|| Message::MatchMessage(hdr, PLAYER_MSGTYPE_CMD,
++#ifdef PLAYER_GRAPHICS2D_CMD_MULTILINE
++			|| MatchMessage::Message(hdr, PLAYER_MSGTYPE_CMD,
+                                         PLAYER_GRAPHICS2D_CMD_MULTILINE, this->addr)
++#endif
+ 			|| Message::MatchMessage(hdr, PLAYER_MSGTYPE_CMD,
+ 					PLAYER_GRAPHICS2D_CMD_POLYGON, this->addr)) {
+ 		Message msg(*hdr, data);
+@@ -273,7 +275,7 @@
+ 		glEnd();
+ 	}
+ 		break;
+-
++#ifdef PLAYER_GRAPHICS2D_CMD_MULTILINE
+         case PLAYER_GRAPHICS2D_CMD_MULTILINE: {
+                 player_graphics2d_cmd_multiline_t
+                                 & data =
+@@ -285,7 +287,7 @@
+                 glEnd();
+         }
+                 break;
+-
++#endif
+ 
+ 
+ 
+--- build/stage/libstageplugin/p_simulation.cc	2012-02-29 20:18:37.000000000 -0500
++++ build/stage/libstageplugin/p_simulation.cc	2013-05-06 18:29:57.460133931 -0400
+@@ -59,8 +59,9 @@
+ extern PlayerTime* GlobalTime;
+ 
+ #define DRIVER_ERROR(X) printf( "Stage driver error: %s\n", X )
+-
+-
++#ifndef PLAYER_CAPABILITIES_REQ
++#define PLAYER_CAPABILITIES_REQ PLAYER_CAPABILTIES_REQ
++#endif
+ ////////////////////////////////////////////////////////////////////////////////////
+ 
+ //
Index: src/stageros.cpp
===================================================================
--- src/stageros.cpp	(revision 40422)
+++ src/stageros.cpp	(working copy)
@@ -42,6 +42,7 @@
 #include <boost/thread/mutex.hpp>
 #include <boost/thread/thread.hpp>
 #include <sensor_msgs/LaserScan.h>
+#include <sensor_msgs/Image.h>
 #include <nav_msgs/Odometry.h>
 #include <geometry_msgs/Twist.h>
 #include <rosgraph_msgs/Clock.h>
@@ -49,6 +50,7 @@
 #include "tf/transform_broadcaster.h"
 
 #define USAGE "stageros <worldfile>"
+#define IMAGE "image"
 #define ODOM "odom"
 #define BASE_SCAN "base_scan"
 #define BASE_POSE_GROUND_TRUTH "base_pose_ground_truth"
@@ -59,6 +61,7 @@
 {
   private:
     // Messages that we'll send or receive
+    sensor_msgs::Image *imageMsgs;
     sensor_msgs::LaserScan *laserMsgs;
     nav_msgs::Odometry *odomMsgs;
     nav_msgs::Odometry *groundTruthMsgs;
@@ -71,8 +74,10 @@
     boost::mutex msg_lock;
 
     // The models that we're interested in
+    std::vector<Stg::ModelCamera *> cameramodels;
     std::vector<Stg::ModelRanger *> lasermodels;
     std::vector<Stg::ModelPosition *> positionmodels;
+    std::vector<ros::Publisher> image_pubs_;
     std::vector<ros::Publisher> laser_pubs_;
     std::vector<ros::Publisher> odom_pubs_;
     std::vector<ros::Publisher> ground_truth_pubs_;
@@ -150,6 +155,8 @@
     node->lasermodels.push_back(dynamic_cast<Stg::ModelRanger *>(mod));
   if (dynamic_cast<Stg::ModelPosition *>(mod))
     node->positionmodels.push_back(dynamic_cast<Stg::ModelPosition *>(mod));
+  if (dynamic_cast<Stg::ModelCamera *>(mod))
+    node->cameramodels.push_back(dynamic_cast<Stg::ModelCamera *>(mod));
 }
 
 void
@@ -186,7 +193,7 @@
   Stg::Init( &argc, &argv );
 
   if(gui)
-    this->world = new Stg::WorldGui(800, 700, "Stage (ROS)");
+    this->world = new Stg::WorldGui(400, 300, "Stage (ROS)");
   else
     this->world = new Stg::World();
 
@@ -207,13 +214,21 @@
               "the world file.");
     ROS_BREAK();
   }
+  else if ( cameramodels.size() != positionmodels.size())
+  {
+    ROS_FATAL("number of position models and camera models must be equal in "
+              "the world file.");
+    ROS_BREAK();
+  }
+
   size_t numRobots = positionmodels.size();
-  ROS_INFO("found %u position/laser pair%s in the file", 
+  ROS_INFO("found %u set%s of position/laser/camera in the file", 
            (unsigned int)numRobots, (numRobots==1) ? "" : "s");
 
   this->laserMsgs = new sensor_msgs::LaserScan[numRobots];
   this->odomMsgs = new nav_msgs::Odometry[numRobots];
   this->groundTruthMsgs = new nav_msgs::Odometry[numRobots];
+  this->imageMsgs = new sensor_msgs::Image[numRobots];
 }
 
 
@@ -248,9 +263,19 @@
       ROS_ERROR("no position");
       return(-1);
     }
+    if(this->cameramodels[r])
+    {
+      this->cameramodels[r]->Subscribe();
+    }
+    else
+    {
+      ROS_ERROR("no camera");
+      return(-1);
+    }
     laser_pubs_.push_back(n_.advertise<sensor_msgs::LaserScan>(mapName(BASE_SCAN,r), 10));
     odom_pubs_.push_back(n_.advertise<nav_msgs::Odometry>(mapName(ODOM,r), 10));
     ground_truth_pubs_.push_back(n_.advertise<nav_msgs::Odometry>(mapName(BASE_POSE_GROUND_TRUTH,r), 10));
+    image_pubs_.push_back(n_.advertise<sensor_msgs::Image>(mapName(IMAGE,r), 10));
     cmdvel_subs_.push_back(n_.subscribe<geometry_msgs::Twist>(mapName(CMD_VEL,r), 10, boost::bind(&StageNode::cmdvelReceived, this, r, _1)));
   }
   clock_pub_ = n_.advertise<rosgraph_msgs::Clock>("/clock",10);
@@ -262,6 +287,7 @@
   delete[] laserMsgs;
   delete[] odomMsgs;
   delete[] groundTruthMsgs;
+  delete[] imageMsgs;
 }
 
 bool
@@ -345,6 +371,36 @@
                                           mapName("base_footprint", r),
                                           mapName("base_link", r)));
 
+    // Get latest image data
+    // Translate into ROS message format and publish
+    if (this->cameramodels[r]->FrameColor()) {
+       this->imageMsgs[r].height=this->cameramodels[r]->getHeight();
+       this->imageMsgs[r].width=this->cameramodels[r]->getWidth();
+       this->imageMsgs[r].encoding="rgba8";
+       //this->imageMsgs[r].is_bigendian="";
+       this->imageMsgs[r].step=this->imageMsgs[r].width*4;
+       this->imageMsgs[r].data.resize(this->imageMsgs[r].width*this->imageMsgs[r].height*4);
+
+       memcpy(&(this->imageMsgs[r].data[0]),this->cameramodels[r]->FrameColor(),this->imageMsgs[r].width*this->imageMsgs[r].height*4);
+
+       //invert the opengl weirdness
+       int height = this->imageMsgs[r].height - 1;
+       int linewidth = this->imageMsgs[r].width*4;
+
+       char* temp = new char[linewidth];
+       for (int y = 0; y < (height+1)/2; y++) 
+       {
+            memcpy(temp,&this->imageMsgs[r].data[y*linewidth],linewidth);
+            memcpy(&(this->imageMsgs[r].data[y*linewidth]),&(this->imageMsgs[r].data[(height-y)*linewidth]),linewidth);
+            memcpy(&(this->imageMsgs[r].data[(height-y)*linewidth]),temp,linewidth);
+       }
+
+        this->imageMsgs[r].header.frame_id = mapName("image", r);
+        this->imageMsgs[r].header.stamp = sim_time;
+
+        this->image_pubs_[r].publish(this->imageMsgs[r]);
+    }
+
     // Get latest odometry data
     // Translate into ROS message format and publish
     this->odomMsgs[r].pose.pose.position.x = this->positionmodels[r]->est_pose.x;
Index: world/willow-four-erratics.world
===================================================================
--- world/willow-four-erratics.world	(revision 40422)
+++ world/willow-four-erratics.world	(working copy)
@@ -4,12 +4,14 @@
   gui_nose 0
 )
 
-define topurg laser
+define topurg ranger
 (
+  sensor( 
+    range [ 0.0  30.0 ]
+    fov 270.25
+    samples 1081
+  )
 
-  range_max 30.0
-  fov 270.25
-  samples 1081
   # generic model properties
   color "black"
   size [ 0.05 0.05 0.1 ]
@@ -23,6 +25,20 @@
   gui_nose 1
   drive "diff"
   topurg(pose [ 0.050 0.000 0 0.000 ])
+
+  camera
+  (
+    # laser properties
+    resolution [ 300 400 ]
+    range [ 0.2 8.0 ]
+    fov [ 70.0 40.0 ]
+    pantilt [ 0.0 0.0 ]
+
+    # model properties
+    size [ 0.1 0.07 0.05 ]
+    color "black"
+    watts 100.0 # TODO find watts for sony pan-tilt camera
+  )
 )
 
 define floorplan model
Index: world/willow-erratic.world
===================================================================
--- world/willow-erratic.world	(revision 40422)
+++ world/willow-erratic.world	(working copy)
@@ -1,3 +1,4 @@
+
 define block model
 (
   size [0.5 0.5 0.5]
@@ -25,6 +26,21 @@
   gui_nose 1
   drive "diff"
   topurg(pose [ 0.050 0.000 0 0.000 ])
+
+  camera
+  (
+    # laser properties
+    resolution [ 32 32 ]
+    range [ 0.2 8.0 ]
+    fov [ 70.0 40.0 ]
+    pantilt [ 0.0 0.0 ]
+
+    # model properties
+    size [ 0.1 0.07 0.05 ]
+    color "black"
+    watts 100.0 # TODO find watts for sony pan-tilt camera
+  )
+
 )
 
 define floorplan model
Index: Makefile.stage
===================================================================
--- Makefile.stage	(revision 40422)
+++ Makefile.stage	(working copy)
@@ -26,6 +26,7 @@
 installed: wiped $(SOURCE_DIR)/unpacked Makefile.stage
 	mkdir -p $(SOURCE_DIR)/build
 	cd $(SOURCE_DIR)/build && cmake -D CMAKE_INSTALL_PREFIX=$(CMAKE_INSTALL_PREFIX) -D CMAKE_INSTALL_RPATH=$(CMAKE_INSTALL_PREFIX)/lib:$(CMAKE_INSTALL_PREFIX)/lib64 ..
+	patch -p0 -i base_stage.patch
 	cd $(SOURCE_DIR)/build && make DESTDIR=$(DESTDIR) $(ROS_PARALLEL_JOBS) install
 	cd $(SOURCE_DIR)/build && if [ `uname` == "Darwin" ]; then install_name_tool -id $(CMAKE_INSTALL_PREFIX)/lib/libstage.4.1.1.dylib $(CMAKE_INSTALL_PREFIX)/lib/libstage.4.1.1.dylib; fi
 	touch installed
